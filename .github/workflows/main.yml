name: Deploy to Amazon EC2

# main브랜치에 push 혹은 pull_request가 되었을 때 작동하게 설정
on:
#   push:
#     branches:
#       - main
 pull_request:
   branches:
     - main

# 본인이 설정한 값을 여기서 채워넣습니다.
# 리전, 버킷 이름, CodeDeploy 앱 이름, CodeDeploy 배포 그룹 이름
env:
 AWS_REGION: ap-northeast-2
 S3_BUCKET_NAME: lee-github-actions-s3-bucket
 CODE_DEPLOY_APPLICATION_NAME: my-codedeploy-app
 CODE_DEPLOY_DEPLOYMENT_GROUP_NAME: my-codedeploy-deployment-group

permissions:
 contents: read

jobs:
 deploy:
   name: Deploy
   runs-on: ubuntu-latest
   environment: production

   steps:
   # (1) 기본 체크아웃
   - name: Checkout
     uses: actions/checkout@v3

   # (2) JDK 11 세팅
   - name: Set up JDK 11
     uses: actions/setup-java@v3
     with:
       distribution: 'temurin'
       java-version: '11'

   # (3) yml세팅
   - name: set yml
     uses: microsoft/variable-substitution@v1
     with:
        files: ./src/main/resources/application.yml 
     env:
        spring.datasource.url: ${{ secrets.DB_URL }} 
        spring.datasource.username: ${{ secrets.DB_USERNAME }} 
        spring.datasource.password: ${{ secrets.DB_PASSWORD }} 

   # (4) Gradle build
   - name: Grant execute permission for gradlew
     run: chmod +x gradlew
     shell: bash

   - name: Build with Gradle
     run: ./gradlew build
     shell: bash

   # (5) AWS 인증 (IAM 사용자 Access Key, Secret Key 활용)
   - name: Configure AWS credentials
     uses: aws-actions/configure-aws-credentials@v1
     with:
       aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
       aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
       aws-region: ${{ env.AWS_REGION }}

   # (6) 빌드 결과물을 S3 버킷에 업로드
   - name: Upload to AWS S3
     run: |
       aws deploy push \
         --application-name ${{ env.CODE_DEPLOY_APPLICATION_NAME }} \
         --ignore-hidden-files \
         --s3-location s3://$S3_BUCKET_NAME/$GITHUB_SHA.zip \
         --source .

   # (7) S3 버킷에 있는 파일을 대상으로 CodeDeploy 실행
   - name: Deploy to AWS EC2 from S3
     run: |
       aws deploy create-deployment \
         --application-name ${{ env.CODE_DEPLOY_APPLICATION_NAME }} \
         --deployment-config-name CodeDeployDefault.AllAtOnce \
         --deployment-group-name ${{ env.CODE_DEPLOY_DEPLOYMENT_GROUP_NAME }} \
         --s3-location bucket=$S3_BUCKET_NAME,key=$GITHUB_SHA.zip,bundleType=zip
