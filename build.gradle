buildscript { // 동적쿼리
    ext {
        queryDslVersion = "5.0.0"
    }
}

plugins {
    id 'java'
    id 'org.springframework.boot' version '2.7.5'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
    id "com.ewerk.gradle.plugins.querydsl" version "1.0.10" // 동적쿼리
    id 'jacoco' // jacoco
    id "org.asciidoctor.jvm.convert" version "3.3.2" // asciidoctor
}

jacoco {
    // JaCoCo 버전
    toolVersion = "0.8.8"

//  테스트결과 리포트를 저장할 경로 변경
//  default는 "${project.reporting.baseDir}/jacoco"
//  reportsDir = file("$buildDir/customJacocoReportDir")
}

group = 'com.ono'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    asciidoctorExtensions // dependenciew에 적용한 것
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'

    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity5'

    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'com.mysql:mysql-connector-j'

    compileOnly 'org.projectlombok:lombok'
    compileOnly("org.springframework.boot:spring-boot-devtools")

    annotationProcessor 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok' // 추가

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'

    // asciidoctorExtensions => configurations 에 추가
    asciidoctorExtensions 'org.springframework.restdocs:spring-restdocs-asciidoctor'

    // restdocs
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'

    // mockito
    testImplementation 'org.mockito:mockito-inline:4.8.0'

    // swagger
    implementation group: 'io.springfox', name: 'springfox-boot-starter', version: '3.0.0'

    // redisson
    implementation 'org.redisson:redisson-spring-boot-starter:3.18.0'

    // querydsl
    implementation "com.querydsl:querydsl-jpa:${queryDslVersion}"
    implementation "com.querydsl:querydsl-apt:${queryDslVersion}"

    // p6spy
    implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.8.1'

    //Actuator
//	implementation 'org.springframework.boot:spring-boot-starter-actuator'
    compile("org.springframework.boot:spring-boot-starter-actuator")
    implementation 'io.micrometer:micrometer-registry-prometheus'   //promethus

    //jwt
    compileOnly group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.11.2'
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.11.2'
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.11.2'

}

tasks.named('test') {
    useJUnitPlatform()
    // 위에서 작성한 snippetsDir 디렉토리를 test의 output으로 구성하는 설정 -> 스니펫 조각들이 build/generated-snippets로 출력
    outputs.dir snippetsDir
    finalizedBy jacocoTestReport
}

/**
 * Rest Docs start
 */
ext {
    // 아래서 사용할 변수 선언
    snippetsDir = file('build/generated-snippets')
}

asciidoctor { // asciidoctor 작업 구성
    dependsOn test // test 작업 이후에 작동하도록 하는 설정
    configurations 'asciidoctorExtensions' // 위에서 작성한 configuration 적용
    inputs.dir snippetsDir // snippetsDir 를 입력으로 구성

    // source가 없으면 .adoc파일을 전부 html로 만들어버림
    // source 지정시 특정 adoc만 HTML로 만든다.
    sources{
        include("**/index.adoc","**/common/*.adoc")
    }

    // 특정 .adoc에 다른 adoc 파일을 가져와서(include) 사용하고 싶을 경우 경로를 baseDir로 맞춰주는 설정입니다.
    // 개별 adoc으로 운영한다면 필요 없는 옵션입니다.
    baseDirFollowsSourceFile()
}

// static/docs 폴더 비우기
asciidoctor.doFirst {
    delete file('src/main/resources/static/docs')
}

// asccidoctor 작업 이후 생성된 HTML 파일을 static/docs 로 copy
task copyDocument(type: Copy) {
    dependsOn asciidoctor
    from file("build/docs/asciidoc")
    into file("src/main/resources/static/docs")
}

// build 의 의존작업 명시
build {
    dependsOn copyDocument
}
/**
 * Rest Docs end
 */



jar {
    enabled = false
}

/**
 * jacoco start
 */
jacocoTestReport {
    reports {
        html.destination  file("${buildDir}/jacocoHtml")
        xml.enabled false
        csv.enabled false

//        html.destination file("src/jacoco/jacoco.html")
//        xml.destination file("src/jacoco/jacoco.xml")
    }

    def Qdomains = []
    for (qPattern in '**/QA'..'**/QZ') {
        Qdomains.add(qPattern + '*')
    }

    afterEvaluate {
        classDirectories.setFrom(
                files(classDirectories.files.collect {
                    fileTree(dir: it, excludes: [
                            '**/domain/base/*',
                            '**/UIController.*',
                            '**/RefreshToken.*',
                            '**/*Dto*',
                            '**/config/*',
                            '**/security/*',
                            '**/aop/*',
                            '**/utils/*',
                            '**/BaseEntity',
                            '**/redisson/*',
                            '**/springfox/*',
                    ] + Qdomains)
                })
        )
    }
    finalizedBy 'jacocoTestCoverageVerification'
}

jacocoTestCoverageVerification {
    def Qdomains = []
    for (qPattern in '*.QA'..'*.QZ') {
        Qdomains.add(qPattern + '*')
    }

    violationRules {
        rule {
            element = 'CLASS'
            enabled = true

            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.60
            }

            limit {
                counter = 'METHOD'
                value = 'COVEREDRATIO'
                minimum = 0.60
            }

            includes = [
                    '**/domain/**'
            ]

            excludes = [
                    '**/domain/base/*',
                    '**/*Dto*',
                    '**/config/*',
                    '**/jwt/*',
                    '**/utils/*',
                    '**/BaseEntity',
                    '**/redisson/*',
            ] + Qdomains
        }
    }
}

task testCoverage {
    group 'verification'
    description 'Run tests with coverage'

    dependsOn('test', 'jacocoTestReport', 'jacocoTestCoverageVerification')

    tasks['jacocoTestReport'].mustRunAfter(tasks['test'])
    tasks['jacocoTestCoverageVerification'].mustRunAfter(tasks['jacocoTestReport'])
}
/**
 * jacoco end
 */


/**
 * queryDSL start
 */
	def querydslDir = "$buildDir/generated/querydsl"

	querydsl {
		jpa = true
		querydslSourcesDir = querydslDir
	}

	sourceSets {
		main.java.srcDir querydslDir
	}

	configurations {
		compileOnly {
			extendsFrom annotationProcessor
		}
		querydsl.extendsFrom compileClasspath
	}

	compileQuerydsl {
		options.annotationProcessorPath = configurations.querydsl
	}

/**
 * queryDSL end
 */