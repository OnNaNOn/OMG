<?xml version="1.0" encoding="UTF-8"?>
<configuration>
    <!-- 로그 패턴에 색상 적용 %clr(pattern){color} -->
    <conversionRule conversionWord="clr" converterClass="org.springframework.boot.logging.logback.ColorConverter" />

    <!-- springProfile 태그로 복수 개의 logback 파일을 설정할 수 있다. -->
    <!--    <springProfile name="local">-->
    <!--        <property resource="logback-local.yml"/>-->
    <!--    </springProfile>-->
    <!--    <springProfile name="dev">-->
    <!--        <property resource="logback-dev.yml"/>-->
    <!--    </springProfile>-->

    <!-- log 변수 값 설정 -->
    <!--    <springProperty name="LOG_PATH" source= "log.config.path" />-->
    <!--    <springProperty name="LOG_MAX_HISTORY" source= "log.config.maxHistory" />-->
    <!--    <springProperty name="LOG_TOTAL_SIZE_CAP" source= "log.config.totalSizeCap" />-->

    <!-- pattern -->
    <property name="CONSOLE_LOG_PATTERN" value="[%d{yyyy-MM-dd HH:mm:ss}:%-3relative]  %clr(%-5level) %clr(${PID:-}){magenta} %clr(---){faint} %clr([%15.15thread]){faint} %clr(%-40.40logger{36}){cyan} %clr(:){faint} %msg%n"/>
    <property name="FILE_LOG_PATTERN" value="[%d{yyyy-MM-dd HH:mm:ss}:%-3relative] %-5level ${PID:-} --- [%15.15thread] %-40.40logger{36} : %msg%n"/>

    <!--  appender class 종류  -->
    <!--ch.qos.logback.core.ConsoleAppender-->
    <!--ch.qos.logback.core.FileAppender-->
    <!--ch.qos.logback.core.rolling.RollingFileAppender-->
    <!--ch.qos.logback.classic.net.SMTPAppender-->
    <!--ch.qos.logback.classic.db.DBAppender-->

    <!-- Console Appender -->
    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <layout class="ch.qos.logback.classic.PatternLayout">
            <Pattern>${CONSOLE_LOG_PATTERN}</Pattern>
        </layout>
    </appender>


    <!-- File Appender -->
    <!-- INFO 인 경우 파일에 로그 처리 -->
    <appender name="INFO_LOG" class="ch.qos.logback.core.rolling.RollingFileAppender">

        <!-- 파일 경로 설정 -->
        <!--        <file>./logs/info_log.log</file>-->

        <!-- 출력 패턴 설정-->
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <!-- 해당 패턴 네이밍으로 현재 로그가 기록됨 -->
            <pattern>${FILE_LOG_PATTERN}</pattern>
        </encoder>


        <!-- Rolling 정책 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- .gz,.zip 등을 넣으면 자동 일자별 로그 파일 압축 -->
            <fileNamePattern>./logs/info_log_%d{yyyy-MM-dd}-%i.log</fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <!-- 파일당 최고 용량 kb, mb, gb -->
                <maxFileSize>100MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <!-- 일자별 로그 파일 최대 보관 주기(~일), 해당 설정일 이상된 파일은 자동으로 제거-->
            <maxHistory>30</maxHistory>
        </rollingPolicy>

        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>INFO</level>
            <!-- 해당 레벨만 기록한다. -->
            <onMatch>ACCEPT</onMatch>
            <!-- 다른 수준의 레벨은 기록하지 않는다.(상위 레벨도 기록 안함),
            상위 수준의 레벨에 대한 기록을 원하면 ACCEPT 로 하면 기록된다. -->
            <onMismatch>DENY</onMismatch>
        </filter>

    </appender>

    <!-- WARN 인 경우 파일에 로그 처리 -->
    <appender name="WARN_LOG" class="ch.qos.logback.core.rolling.RollingFileAppender">

        <!-- 출력 패턴 설정-->
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${FILE_LOG_PATTERN}</pattern>
        </encoder>

        <!-- 파일 경로 설정 -->
        <!-- <file>./logs/local/warn_log_%d{yyyy-MM-dd}-%i.log</file> -->


        <!-- 에러의 경우 파일에 로그 처리 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>WARN</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>

        <!-- Rolling 정책 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>./logs/warn_log_%d{yyyy-MM-dd}-%i.log</fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <!-- 파일당 최고 용량 kb, mb, gb -->
                <maxFileSize>100MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <!-- 일자별 로그 파일 최대 보관 주기(~일), 해당 설정일 이상된 파일은 자동으로 제거-->
            <maxHistory>180</maxHistory>
        </rollingPolicy>
    </appender>

    <!-- ERROR 인 경우 파일에 로그 처리 -->
    <appender name="ERR_LOG" class="ch.qos.logback.core.rolling.RollingFileAppender">

        <!-- 출력 패턴 설정-->
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${FILE_LOG_PATTERN}</pattern>
        </encoder>

        <!-- 파일 경로 설정 -->
        <!-- <file>./logs/local/err_log_%d{yyyy-MM-dd}-%i.log</file> -->


        <!-- 에러의 경우 파일에 로그 처리 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>

        <!-- Rolling 정책 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>./logs/err_log_%d{yyyy-MM-dd}-%i.log</fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <!-- 파일당 최고 용량 kb, mb, gb -->
                <maxFileSize>100MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <!-- 일자별 로그 파일 최대 보관 주기(~일), 해당 설정일 이상된 파일은 자동으로 제거-->
            <maxHistory>180</maxHistory>
        </rollingPolicy>
    </appender>

    <!-- root레벨 설정 -->
    <!-- Info 레벨의 로그를 콘솔에 출력 -->
    <!-- 실제 로깅을 수행하는 객체로 root는 최대 하나를 가질 수 있고 logger는 여러개를 가질 수 있으며 root를 상속받는다. -->
    <root level="INFO">
        <appender-ref ref="CONSOLE"/>
        <appender-ref ref="INFO_LOG" />
        <appender-ref ref="WARN_LOG" />
        <appender-ref ref="ERR_LOG" />
    </root>

    <!-- 특정패키지 로깅레벨 설정 -->
    <!-- 로거가 발생될 때, 설정해둔 대상을 파일에 기록한다. -->
    <!-- 콘솔에 출력된 LogController 에 대해서 아래 작업을 실행한다. -->
    <!-- DEBUG 레벨 이상에서만 실행한다. -->
    <!-- Debug 이상의 레벨에 대해서 각각 <appender-ref ref="INFO_LOG" /> 와 <appender-ref ref="WARN_LOG" /> 의 변수에 할당해둔 명령이 실행된다. -->
    <logger name="com.ono.omg.controller" additivity="false">
        <level value = "DEBUG" />
        <appender-ref ref="INFO_LOG" />
        <appender-ref ref="WARN_LOG" />
        <appender-ref ref="ERR_LOG" />
    </logger>

    <!-- log 레벨 설정 (org.springframework.web=debug)-->
    <!--    <logger name="org.springframework.web" level="debug">-->
    <!--        <appender-ref ref="INFO_LOG" />-->
    <!--        <appender-ref ref="WARN_LOG" />-->
    <!--        <appender-ref ref="ERR_LOG" />-->
    <!--    </logger>-->

    <!--    <logger name="org.hibernate.SQL" additivity="false">-->
    <!--        <level value = "DEBUG" />-->
    <!--        <appender-ref ref="INFO_LOG" />-->
    <!--    </logger>-->


    <!--  ####################################  -->

    <!-- spring profile별 로그 설정 -->
    <!--  local 환경  -->
    <!--    <springProfile name="local">-->
    <!--        <root level="INFO">-->
    <!--     참조할 appender - STDOUT -->
    <!--            <appender-ref ref="CONSOLE" />-->
    <!--            <appender-ref ref="INFO_LOG" />-->
    <!--        </root>-->
    <!--    </springProfile>-->

    <!--  dev 환경  -->
    <!--    <springProfile name="dev">-->
    <!--        <root level="debug">-->
    <!--     참조할 appender - STDOUT -->
    <!--            <appender-ref ref="CONSOLE" />-->
    <!--        </root>-->
    <!--        <logger name="org.springframework.web" level="debug">-->
    <!--     참조할 appender - FILE -->
    <!--            <appender-ref ref="INFO_LOG" />-->
    <!--            <appender-ref ref="WARN_LOG" />-->
    <!--            <appender-ref ref="ERR_LOG" />-->
    <!--        </logger>-->
    <!--    </springProfile>-->

</configuration>