import time
from datetime import timedelta
import pandas as pd
import sqlalchemy as db
from faker import Faker
from sqlalchemy import create_engine
import random
from random import randint

fake = Faker('ko_KR') # locale 정보 설정
Faker.seed() # 초기 seed 설정

# ======= Reference =======
# https://velog.io/@seanlee/이커머스-더미데이터-생성
# https://www.daleseo.com/python-faker/

# name : 이름 (문자)
# phone : 휴대전화 (문자, 010-****-**** 형식)
# user_status : 유저상태 (문자, ['active', 'inactive', 'dormancy'])
# user_class : 유저등급 (문자, ['일반','Family', 'VIP', 'VVIP'])
# email : 이메일 주소 (문자)
# marketing_agree : 마케팅 수신동의 (참거짓)
# social_login : 소셜 로그인 (문자, ['google','facebook','kakao','naver'])
# last_logged_at : 마지막 접속일 (날짜)
# created_at : 생성일 및 가입일 (날짜)
# address: 주소

# dummy data count
repeat_count = 10

account_id = [randint(1, 10000) for i in range(repeat_count)]
product_id = [randint(1, 50000) for i in range(repeat_count)]
# orderPrice는 연관관계 설정이 필요할 것 같음. 추후 수정하거나 묵인하고 진행하거나 택1 필요함.
total_price = [((((randint(1000, 1000000)) % 100) * 1000) + 1000) for i in range(repeat_count)]
orderType = [random.choice(['주문 취소', '주문 완료', '상품 준비','배송 시작','수령 완료']) for i in range(repeat_count)]
created_at = [fake.date_between(start_date = '-1y', end_date ='today') for i in range(repeat_count)]
modified_at =[fake.date_between(start_date = '-1y', end_date ='today') for i in range(repeat_count)]


df = pd.DataFrame()
df['account_id'] = account_id
df['product_id'] = product_id
df['total_price'] = total_price
df['order_type'] = orderType
df['created_at'] = created_at
df['modified_at'] = modified_at

print(created_at)

# print(df)

# pandas to dict == to json
# ex) {"name": "name", ...}
records = df.to_dict(orient='records')
# print(records)

# <...> 부분은 본인 DB 정보
engine = create_engine("mysql+mysqldb://root:1234@127.0.0.1:3306/melocal?charset=utf8mb4")

with engine.connect() as conn:
    metadata = db.MetaData()
# <table>에는 데이터 형식에 맞게 테이블이 생성되어 있어야 됨 (본인 테이블명 기입)
    table = db.Table('orders', metadata, autoload=True, autoload_with=engine)

    query = db.insert(table).values(records)
    result_proxy = conn.execute(query)
    print("=========")
